======================
Personal Notes
======================
Docs:
https://docs.nestjs.com/


To start the project in dev mode run:
yarn start:dev

===============
Modules
===============
Docs:
https://docs.nestjs.com/modules

Modules organize the and and declared with a class annotated
by a decorator module.

Modules allow us to break the app into smaller component

1. Auth Module
For the first time it's better to learn to create it on your own not by generator.
The Auth Module will be stored in auth folder

auth
|- auth.module.ts => the auth module file

2. User module
To generate the module, you can use this command:
nest g module user

After the module generated, it will be auto imported in app module

user
|- user.module.ts => user module file

3. Bookmark module
To generate the module, you can use this command:
nest g module bookmark

After the module generated, it will be auto imported in app module

bookmark
|- bookmark.module.ts => bookmark module file

===========================
How Request is handled
===========================
For example the controller received a POST request from the internet asking to login a user.
Then it's going to call a function from the auth.service then return its response back to the client.

But to do so, auth controller have to instantiate an auth service class (cause in the end it's JS).
To avoid the instantiate process using new like usual, we use depedency injection. It means instead
of the controller to declare it.

You just have to write the service name with private(you can see it on the code). That's how we do
it on nest JS.

example if you want to call the test function inside the service:
this.authService.test();

==================
Controllers
==================

Docs:
https://docs.nestjs.com/controllers

Responsible to handle incoming request and returning responses to client.
Nest JS uses Express under the hood and if you see the response's header,
you can see it is powered by Express.

The response will be automatically change the data type based on our return from
the service

For creating the logic, it will be separated to Controllers and Providers.

You should always keep your controller clean by only defining the route here
and keep the business logic separated

1. Auth Controllers
For the first time it's better to learn to create it on your own not by generator.
The Auth Controllers will be stored in auth folder. Don't forget to import em later

auth
|- auth.controller.ts => the auth controller file

There will be two function here which are Login and signup.
To make this function route, we just annotate it with decorator.

Since we are in auth controller, it's usually a good practice to put
a global prefix route called auth:
@Controller('auth')


> signin
Method: POST (@Post('signin))
function: 

> signup
Method: POST (@Post('signup))

===================
Providers/Services
===================

Docs:
https://docs.nestjs.com/providers

Responsible for executing the business logic

For creating the logic, it will be separated to Controllers and Providers

1. Auth Services
For the first time it's better to learn to create it on your own not by generator.
The Auth Services will be stored in auth folder. Don't forget to import em later

auth
|- auth.service.ts => the auth Services file

There will be two function here which are Login and signup.

> signin
signin() function

> signup
signup() function

================
Database setup
================
Here we will setup the Postgre Database using docker.

Create the Docker Compose file:
# DOCKER COMPOSE FOR SETUP POSTGRES
version: '3.8'
services:
  dev-db:
    image: postgres:13
    container_name: dev-db
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: nest
    networks:
      - dev-network

networks:
  dev-network:

To connect the database, we will use an ORM called Prisma.
Prisma is a query builder and it's easy to use
http://prisma.io/

we will need to create another database module than can be used
by other module

first install Prisma for development:
yarn add -D prisma

and install the Prisma Client for JavaScript:
yarn add @prisma/client

so we have the Prisma CLI installed, first we need to init the Prisma:
npx prisma init

it will generate prisma folder and .env file containing the
ENV variable to connect to the Database

you can take a look the schema file, it contains the config for your Prisma

========================
User and Bookmark Model 
========================
For the model we will write it on Prisma Schema file.

Here we will create user and bookmark model
// User and Bookmark Model
model User {
  // id is the primary key
  id Int @id @default(autoincrement())
  // Created timestamp
  createdAt DateTime @default(now())
  // Updated timestamp
  updatedAt DateTime @updatedAt

  // User's email
  email String @unique
  // hashed password
  hash String

  // FirstName and LastName (Optional)
  firstName String?
  lastName String?

}

model Bookmark {
  // id is the primary key
  id Int @id @default(autoincrement())
    // Created timestamp
  createdAt DateTime @default(now())
  // Updated timestamp
  updatedAt DateTime @updatedAt

  // Bookmark's title
  title String
  // Bookmark's Description
  description String?
  // Bookmark's URL
  link String
}

========================
Running Prisma Migration
========================


Set the Database URL on .env file with the following format:
DATABASE_URL="postgresql://postgres:123@localhost:5432/nest?schema=public"

To see all the Prisma command run this:
npx prisma --help

To run the migration, run this command:
npx prisma migrate dev --name init

After the migration, you can import the User and Bookmark model from
the Prisma Client
import { User, Bookmark } from '@prisma/client'

Now, we can access the database from the browser using Prisma Studio:
npx prisma studio

Open the browser and go to http://localhost:5555 to visit the Prisma Studio

========================
Prisma Module
========================
To use the Prisma Client, we need to create a module for it.
We're going to encapsulate all our logic regarding the database
in the module and only export from the module

To generate the module, you can use this command:
nest g module prisma

Generate the Prisma Service:
nest g service prisma --no-spec

In the service, we will extends the class from PrismaClient

Now we want the auth module to have access to the Prisma Module
so we need to import it in the auth module

In auth service we can use the depedency injection to use the Prisma Service.
Don't forget to export the Prisma Service from the Prisma Module.

So for the prisma module to be able to accessed by other module,
we need to add Global decorator to the module.

Make sure that your Global Module is imported in the AppModule

========================
Using Auth DTOS
========================
Nest JS uses DTOs (Data Transfer Object) to validate the data.
DTOs is is an object where you push your data from request and run the validation.

We will use the DTOs to validate the request body.

To get the body data we will use a decorator called @Body()

To get the body data type, we will create a folder called dto